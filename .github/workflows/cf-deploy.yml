name: Deploy to bucket

on:
  push:
    branches: ['develop', 'master', 'sandbox']
jobs:
  cancel-previous:
    name: 'Cancel Previous Runs'
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - uses: styfle/cancel-workflow-action@0.8.0
        with:
          access_token: ${{ github.token }}
  env_name:
    runs-on: ubuntu-latest
    steps:
      - name: Get GHA environment name
        id: env_name # TODO - Add sandbox ICS configuration, to use sandbox instead of dev
        run: |
          echo "Running on branch ${{ github.ref }}"
          if [ "${{ github.ref }}" = "sandbox" ]; then
            echo "::set-output name=env_name::sandbox"
            echo "::set-output name=env_file::src/environments/environment.dev.ts"
            echo "::set-output name=build_script::'npm run build'"
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            echo "::set-output name=env_name::dev"
            echo "::set-output name=env_file::src/environments/environment.dev.ts"
            echo "::set-output name=build_script::npm run build"
          elif [ "${{ github.ref }}" = "refs/heads/master" ]; then
            echo "::set-output name=env_name::staging"
            echo "::set-output name=env_file::src/environments/environment.prod.ts"
            echo "::set-output name=build_script::npm run build-stg"
          fi
      - name: Use specified environment secrets from previous step
        run: |
          echo "Environment secrets set name ${{ steps.env_name.outputs.env_name }}"
          echo "Environment file config ${{ steps.env_name.outputs.env_file }}"
          echo "Environment build script ${{ steps.env_name.outputs.build_script }}"
    outputs:
      env_name: ${{ steps.env_name.outputs.env_name }}
      env_file: ${{ steps.env_name.outputs.env_file }}
      build_script: ${{ steps.env_name.outputs.build_script }}
  deploy:
    environment:
      name: ${{ needs.env_name.outputs.env_name }}
    needs: [cancel-previous, env_name]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v2-beta
        with:
          node-version: '10.22.0'
          registry-url: https://registry.npmjs.org/
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-node-
            ${{ runner.os }}-
      - name: Install npm packages
        run: |
          npm install
          envsubst < src/environments/constants.template.ts > src/environments/constants.ts
      - name: Build branch
        run: |
          cp ${{ needs.env_name.outputs.env_file }} src/environments/environment.ts
          ${{ needs.env_name.outputs.build_script }}
      - name: Ensure dist is present
        run: |
          test -d "dist" && echo OK || exit 1
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Clear bucket
        run: |
          aws s3 rm s3://${{ secrets.BUCKET_NAME }} --recursive
      - name: Upload to bucket
        run: |
          aws s3 cp dist s3://${{ secrets.BUCKET_NAME }} --recursive
      - name: Invalidate CloudFront # cloudfront caches s3 content so after each deployment, it needs to be cleared.
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_ID }} --paths "/*"
